Index: app/src/main/java/com/example/quickcash/UserManagement/LogInActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.quickcash.UserManagement;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\n\r\nimport com.example.quickcash.Home.EmployeeHomeActivity;\r\nimport com.example.quickcash.Home.EmployerHomeActivity;\r\nimport com.example.quickcash.R;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\n\r\npublic class LogInActivity extends AppCompatActivity implements View.OnClickListener {\r\n\r\n    private FirebaseDatabase db;\r\n\r\n    /**\r\n     * Initialized the login page on load.\r\n     * @param savedInstanceState\r\n     */\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_login);\r\n\r\n        Button btnLogin = findViewById(R.id.btnLogin);\r\n        btnLogin.setOnClickListener(this);\r\n        initializeFirebase();\r\n    }\r\n\r\n    private void initializeFirebase() {\r\n        db = FirebaseDatabase.getInstance(\"https://csci3130-quickcash-group9-default-rtdb.firebaseio.com/\");\r\n    }\r\n\r\n    /**\r\n     * The method returns the data snapshot from firebase and it calls the method responsible for\r\n     * checking the credentials.\r\n     * @param email - Email provided by the user.\r\n     * @param password - Password provided by the user.\r\n     */\r\n    private void retrieveDataFromFirebase(String email, String password) {\r\n        DatabaseReference userReference = FirebaseDatabase.getInstance().getReference(User.class.getSimpleName());\r\n\r\n        userReference.addValueEventListener(new ValueEventListener() {\r\n\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                // When the data is received, verify the user credential\r\n                if (dataSnapshot.exists()) {\r\n\r\n                    verifyUserCredentials(dataSnapshot, email, password);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                System.out.println(\"Could retrieve: \" + error.getCode());\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Finds a user with the given email. If the user exists => checks the password.\r\n     * If the user credentials match => user is redirected to the proper homepage.\r\n     * If the user email or password do not match the user is informed that \"Invalid Email or Password.\"\r\n     *\r\n     * @param dataSnapshot - data from firebase\r\n     * @param email - email given by the user\r\n     * @param password - password given by the user\r\n     */\r\n    private void verifyUserCredentials(DataSnapshot dataSnapshot, String email, String password) {\r\n\r\n        User userWithGivenEmail = null;\r\n\r\n        if (dataSnapshot == null) {\r\n            setStatusMessage(\"Failed to connect to the database.\");\r\n        } else {\r\n            // Find user with the given email and password.\r\n            userWithGivenEmail = getUserFromDataSnapshot(dataSnapshot, email, password);\r\n\r\n            // If the user if found => switch to the proper homepage.\r\n            if (userWithGivenEmail == null) {\r\n                setStatusMessage(\"Invalid Email or Password.\");\r\n            } else {\r\n                switchToHomePage(userWithGivenEmail.getIsEmployee().equals(\"y\"));\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the email and password and calls other methods to ensure their validity.\r\n     * @param loginPage - login page view.\r\n     */\r\n    @Override\r\n    public void onClick(View loginPage) {\r\n        String email = getEmail();\r\n        String password = getPassword();\r\n\r\n        if (isEmailEmpty(email)) {\r\n            setStatusMessage(\"Empty Email.\");\r\n        } else if (isPasswordEmpty(password)) {\r\n            setStatusMessage(\"Empty Password.\");\r\n        } else if (!isProperEmailAddress(email)) {\r\n            setStatusMessage(\"Improper Email Address\");\r\n        } else {\r\n            retrieveDataFromFirebase(email, password);\r\n            setStatusMessage(\"Verifying credentials\");\r\n        }\r\n\r\n    }\r\n    private void setStatusMessage(String statusMessage) {\r\n        TextView etError = findViewById(R.id.etError);\r\n        etError.setText(statusMessage);\r\n    }\r\n\r\n    /**\r\n     * Returns the user with given email.\r\n     *\r\n     * @param dataSnapshot - is the data received from Firebase\r\n     * @param email - is the email of the user\r\n     * @param password - password of the user.\r\n     * @return user with the given email, if not user is not found => null.\r\n     */\r\n    protected User getUserFromDataSnapshot(DataSnapshot dataSnapshot, String email, String password) {\r\n        for (DataSnapshot snapshot : dataSnapshot.getChildren()) {\r\n            User user = snapshot.getValue(User.class);\r\n            boolean emailMatches = user.getEmail().equals(email);\r\n            boolean passwordMatches = user.getPassword().equals(password);\r\n            if (emailMatches && passwordMatches) {\r\n                return user;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Switches to the proper homepage\r\n     *\r\n     * @param isEmployee - boolean used to determine which home page to open.\r\n     */\r\n    protected void switchToHomePage(boolean isEmployee) {\r\n        Intent homePageIntent;\r\n        if (isEmployee) {\r\n            homePageIntent = new Intent(this, EmployeeHomeActivity.class);\r\n        } else {\r\n            homePageIntent = new Intent(this, EmployerHomeActivity.class);\r\n        }\r\n        startActivity(homePageIntent);\r\n    }\r\n\r\n\r\n    protected String getEmail() {\r\n        EditText etEmail = findViewById(R.id.etEmail);\r\n        return etEmail.getText().toString().trim();\r\n    }\r\n\r\n    protected String getPassword() {\r\n        EditText etPassword = findViewById(R.id.etPassword);\r\n        return etPassword.getText().toString().trim();\r\n    }\r\n\r\n    protected boolean isEmailEmpty(String email) {\r\n        return email.trim().isEmpty();\r\n    }\r\n\r\n    protected boolean isPasswordEmpty(String password) {\r\n        return password.trim().isEmpty();\r\n    }\r\n\r\n    protected boolean isProperEmailAddress(String emailAddress) {\r\n        return emailAddress.trim().matches(\"..*@..*\\\\...*\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/quickcash/UserManagement/LogInActivity.java b/app/src/main/java/com/example/quickcash/UserManagement/LogInActivity.java
--- a/app/src/main/java/com/example/quickcash/UserManagement/LogInActivity.java	
+++ b/app/src/main/java/com/example/quickcash/UserManagement/LogInActivity.java	
@@ -1,188 +1,17 @@
 package com.example.quickcash.UserManagement;
 
-import android.content.Intent;
 import android.os.Bundle;
 
 import androidx.appcompat.app.AppCompatActivity;
 
-import android.view.View;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.TextView;
-
-import androidx.annotation.NonNull;
-
-import com.example.quickcash.Home.EmployeeHomeActivity;
-import com.example.quickcash.Home.EmployerHomeActivity;
 import com.example.quickcash.R;
-import com.google.firebase.database.DataSnapshot;
-import com.google.firebase.database.DatabaseError;
-import com.google.firebase.database.DatabaseReference;
-import com.google.firebase.database.FirebaseDatabase;
-import com.google.firebase.database.ValueEventListener;
-
 
-public class LogInActivity extends AppCompatActivity implements View.OnClickListener {
+public class LogInActivity extends AppCompatActivity {
 
-    private FirebaseDatabase db;
-
-    /**
-     * Initialized the login page on load.
-     * @param savedInstanceState
-     */
     @Override
     protected void onCreate(Bundle savedInstanceState) {
+
         super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_login);
-
-        Button btnLogin = findViewById(R.id.btnLogin);
-        btnLogin.setOnClickListener(this);
-        initializeFirebase();
-    }
-
-    private void initializeFirebase() {
-        db = FirebaseDatabase.getInstance("https://csci3130-quickcash-group9-default-rtdb.firebaseio.com/");
-    }
-
-    /**
-     * The method returns the data snapshot from firebase and it calls the method responsible for
-     * checking the credentials.
-     * @param email - Email provided by the user.
-     * @param password - Password provided by the user.
-     */
-    private void retrieveDataFromFirebase(String email, String password) {
-        DatabaseReference userReference = FirebaseDatabase.getInstance().getReference(User.class.getSimpleName());
-
-        userReference.addValueEventListener(new ValueEventListener() {
-
-            @Override
-            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
-                // When the data is received, verify the user credential
-                if (dataSnapshot.exists()) {
-
-                    verifyUserCredentials(dataSnapshot, email, password);
-                }
-            }
-
-            @Override
-            public void onCancelled(@NonNull DatabaseError error) {
-                System.out.println("Could retrieve: " + error.getCode());
-            }
-
-        });
-    }
-
-    /**
-     * Finds a user with the given email. If the user exists => checks the password.
-     * If the user credentials match => user is redirected to the proper homepage.
-     * If the user email or password do not match the user is informed that "Invalid Email or Password."
-     *
-     * @param dataSnapshot - data from firebase
-     * @param email - email given by the user
-     * @param password - password given by the user
-     */
-    private void verifyUserCredentials(DataSnapshot dataSnapshot, String email, String password) {
-
-        User userWithGivenEmail = null;
-
-        if (dataSnapshot == null) {
-            setStatusMessage("Failed to connect to the database.");
-        } else {
-            // Find user with the given email and password.
-            userWithGivenEmail = getUserFromDataSnapshot(dataSnapshot, email, password);
-
-            // If the user if found => switch to the proper homepage.
-            if (userWithGivenEmail == null) {
-                setStatusMessage("Invalid Email or Password.");
-            } else {
-                switchToHomePage(userWithGivenEmail.getIsEmployee().equals("y"));
-            }
-
-        }
-
-    }
-
-    /**
-     * Gets the email and password and calls other methods to ensure their validity.
-     * @param loginPage - login page view.
-     */
-    @Override
-    public void onClick(View loginPage) {
-        String email = getEmail();
-        String password = getPassword();
-
-        if (isEmailEmpty(email)) {
-            setStatusMessage("Empty Email.");
-        } else if (isPasswordEmpty(password)) {
-            setStatusMessage("Empty Password.");
-        } else if (!isProperEmailAddress(email)) {
-            setStatusMessage("Improper Email Address");
-        } else {
-            retrieveDataFromFirebase(email, password);
-            setStatusMessage("Verifying credentials");
-        }
-
-    }
-    private void setStatusMessage(String statusMessage) {
-        TextView etError = findViewById(R.id.etError);
-        etError.setText(statusMessage);
-    }
-
-    /**
-     * Returns the user with given email.
-     *
-     * @param dataSnapshot - is the data received from Firebase
-     * @param email - is the email of the user
-     * @param password - password of the user.
-     * @return user with the given email, if not user is not found => null.
-     */
-    protected User getUserFromDataSnapshot(DataSnapshot dataSnapshot, String email, String password) {
-        for (DataSnapshot snapshot : dataSnapshot.getChildren()) {
-            User user = snapshot.getValue(User.class);
-            boolean emailMatches = user.getEmail().equals(email);
-            boolean passwordMatches = user.getPassword().equals(password);
-            if (emailMatches && passwordMatches) {
-                return user;
-            }
-        }
-        return null;
-    }
-
-    /**
-     * Switches to the proper homepage
-     *
-     * @param isEmployee - boolean used to determine which home page to open.
-     */
-    protected void switchToHomePage(boolean isEmployee) {
-        Intent homePageIntent;
-        if (isEmployee) {
-            homePageIntent = new Intent(this, EmployeeHomeActivity.class);
-        } else {
-            homePageIntent = new Intent(this, EmployerHomeActivity.class);
-        }
-        startActivity(homePageIntent);
-    }
-
-
-    protected String getEmail() {
-        EditText etEmail = findViewById(R.id.etEmail);
-        return etEmail.getText().toString().trim();
-    }
-
-    protected String getPassword() {
-        EditText etPassword = findViewById(R.id.etPassword);
-        return etPassword.getText().toString().trim();
-    }
-
-    protected boolean isEmailEmpty(String email) {
-        return email.trim().isEmpty();
-    }
-
-    protected boolean isPasswordEmpty(String password) {
-        return password.trim().isEmpty();
-    }
-
-    protected boolean isProperEmailAddress(String emailAddress) {
-        return emailAddress.trim().matches("..*@..*\\...*");
+        setContentView(R.layout.activity_main);
     }
 }
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.android.application'\r\n}\r\n\r\nandroid {\r\n    compileSdk 31\r\n\r\n    defaultConfig {\r\n        applicationId \"com.example.quickcash\"\r\n        minSdk 21\r\n        targetSdk 31\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'com.google.android.material:material:1.4.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'\r\n    implementation platform('com.google.firebase:firebase-bom:28.4.2')\r\n    implementation 'com.google.firebase:firebase-database:20.0.2'\r\n    testImplementation 'junit:junit:4.+'\r\n    testImplementation 'androidx.arch.core:core-testing:2.1.0'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.3'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'\r\n    implementation 'com.google.firebase:firebase-database:20.0.2'\r\n    androidTestImplementation 'com.android.support.test.espresso:espresso-intents:3.0.2'\r\n}\r\napply plugin: 'com.google.gms.google-services'\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	
+++ b/app/build.gradle	
@@ -34,11 +34,19 @@
     implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
     implementation platform('com.google.firebase:firebase-bom:28.4.2')
     implementation 'com.google.firebase:firebase-database:20.0.2'
+    implementation 'androidx.test.espresso:espresso-intents:3.4.0'
+    implementation 'com.google.firebase:firebase-database:20.0.2'
     testImplementation 'junit:junit:4.+'
     testImplementation 'androidx.arch.core:core-testing:2.1.0'
     androidTestImplementation 'androidx.test.ext:junit:1.1.3'
     androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
-    implementation 'com.google.firebase:firebase-database:20.0.2'
     androidTestImplementation 'com.android.support.test.espresso:espresso-intents:3.0.2'
+    androidTestImplementation 'androidx.test:runner:1.4.0'
+    androidTestImplementation 'androidx.test:rules:1.4.0'
+
 }
+
 apply plugin: 'com.google.gms.google-services'
+
+
+
